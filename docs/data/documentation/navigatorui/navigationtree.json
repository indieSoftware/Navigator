{"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NavigationStacks are managed by Navigators. Each "},{"type":"reference","isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack"},{"type":"text","text":" used in your code creates its own "},{"type":"reference","isActive":true,"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator"},{"type":"text","text":" and places an instance of that object into the environment for use by the views contained within it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That allows "},{"inlineContent":[{"text":"those","type":"text"}],"type":"emphasis"},{"type":"text","text":" views to talk to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"their"}]},{"type":"text","text":" navigator."}]},{"text":"Roots","level":2,"type":"heading","anchor":"Roots"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One exception is the “root” Navigator that’s usually configured and installed in the main application."}]},{"type":"codeListing","code":["func applicationNavigator() -> Navigator {","    let configuration: NavigationConfiguration = .init(","        restorationKey: nil, \/\/ \"1.0.0\",","        executionDelay: 0.4, \/\/ 0.3 - 5.0","        verbosity: .info","    )","    return Navigator(configuration: configuration)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That “root” passes the configuration along to its children and also allows for communication in instances like tabs where each tab has its own ManagedNavigationStack."}]},{"type":"heading","anchor":"Growing-The-Tree","text":"Growing The Tree","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you look at the code for "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" (and "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":"), you’ll see where each one gets the current Navigator. That Navigator is then passed to the navigation state as its “parent”, which in turn is used to build a navigation tree."}]},{"type":"codeListing","syntax":"swift","code":["public struct ManagedPresentationView<Content: View>: View {","    @Environment(\\.navigator) private var parent: Navigator","    @Environment(\\.isPresented) private var isPresented","    ...","}"]},{"inlineContent":[{"text":"Every Navigator created within your application lives within that tree.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that tree, in turn, is the key that unlocks much of Navigator’s power and functionality."}]},{"type":"heading","anchor":"TabViews","text":"TabViews","level":2},{"type":"paragraph","inlineContent":[{"text":"Here’s a rough chart that illustrates the navigation tree of a running application that’s using a TabView.","type":"text"}]},{"type":"codeListing","code":["Application (Root Navigator)","TabView","-- Tab1: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab2: ManagedNavigationStack (New Navigator, Root as Parent)","-- Tab3: ManagedNavigationStack (New Navigator, Root as Parent)","---- Sheet: ManagedNavigationStack (New Navigator, Tab 3's as Parent)","------- Cover: ManagedNavigationStack (New Navigator, Presented Navigator is Parent)"],"syntax":null},{"inlineContent":[{"text":"Each tab wants to manage its own navigation, so each one has its own ","type":"text"},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" and its own "},{"type":"codeVoice","code":"Navigator"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This should make sense. If a view within tab 2 wants to push a new view onto the stack, then it needs to be talking to the right navigator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It doesn’t want the view pushed onto tab 3’s stack, does it?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That concept extends to presented sheets and covers as shown in tab 3. Each "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" is installing its own Navigator into the tree, each one linked back to its parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" creates its own "},{"type":"codeVoice","code":"Navigator"},{"type":"text","text":" that manages it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And presented views can have their own presented views, with their own stacks, and so on, and so on, as needed."}]},{"type":"heading","anchor":"Example-Code","text":"Example Code","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"So with all of the above in mind, consider the following example."}]},{"type":"codeListing","code":["struct ContentView: View {","    @Environment(\\.navigator) var parentNavigator","    var body: some View {","        ManagedNavigationStack { navigator in","            VStack {","                Button(\"Doesn't work as expected\") {","                    parentNavigator.navigate(to: Destinations.second)","                }","                Button(\"Works as expected\") {","                    navigator.navigate(to: Destinations.second)","                }","                SomeView()","            }","            .navigationDestination(Destinations.self)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using an environment variable gets the current “parent” Navigator in the tree. (Root in this case.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" creates and installs a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"new"}]},{"type":"text","text":" Navigator into the environment, one that knows how to talk to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which means that the code in the first button fails because it’s talking to the wrong Navigator. If you want to manipulate the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" NavigationStack and the designations that "},{"type":"emphasis","inlineContent":[{"type":"text","text":"it"}]},{"type":"text","text":" knows about, you need to be talking to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"its"}]},{"type":"text","text":" Navigator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to do that is to use the Navigator passed to the ManagedNavigationStack’s closure. That’s shown in the second example."}]},{"type":"codeListing","code":["ManagedNavigationStack { navigator in","    ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another is to use the environment. Wait. What?"}]},{"type":"heading","anchor":"The-Environment","text":"The Environment","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s consider  "},{"type":"codeVoice","code":"SomeView"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct SomeView: View {","    @Environment(\\.navigator) var navigator","    var body: some View {","        Button(\"Also works as expected\") {","            navigator.navigate(to: Destinations.second)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s we’re also pulling from the environment, but in this case the code works as expected since "},{"type":"emphasis","inlineContent":[{"type":"text","text":"its"}]},{"type":"text","text":" environment variable is reading the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" environment variable, which is the one installed by the current "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Walking-The-Tree","text":"Walking The Tree","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"But what if I want to talk to a different Navigator?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s more advanced. One can "},{"type":"codeVoice","code":"find"},{"type":"text","text":" a named Navigator in the tree, but generally you’re going to want to consider other functionality offered by Navigator, like "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true},{"type":"text","text":", or deep linking using "},{"type":"codeVoice","code":"send"},{"type":"text","text":"."}]},{"type":"heading","anchor":"Presenting-Views","text":"Presenting Views","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, as shown earlier, Tab3View presents a sheet using Navigator?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Internal to Navigator, that sheet’s view is wrapped in a  "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","code":["func body(content: Content) -> some View {","    content","        .sheet(item: $state.sheet) { destination in","            ManagedPresentationView {","                destination","            }","        }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That view gets its own Navigator, which knows that it’s been presented and as such is dismissible (See: "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible","isActive":true},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be advised that if you present your own sheets or views externally from Navigator, you need to do the same so Navigator understands that your sheet or cover exists."}]},{"type":"codeListing","code":["\/\/ wrap using ManagedPresentationView","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedPresentationView {","                MyView()","            }","        }","}","\/\/ or use the modifier shortcut which does the same thing","func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            MyView()","                .managedPresentationView()","        }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also just use "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true},{"type":"text","text":" if navigation within the sheet is required."}]},{"type":"codeListing","code":["func body(content: Content) -> some View {","        ...","        .sheet(isPresenting: $showSheet) {","            ManagedNavigationStack {","                MyView()","            }","        }","}"],"syntax":"swift"},{"name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Failure to do any of the above can hinder Navigator’s ability to successfully perform in-app navigation or external deep linking."}]}],"style":"important"}]}],"metadata":{"title":"Understanding The Navigation Tree","roleHeading":"Article","modules":[{"name":"NavigatorUI"}],"role":"article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"seeAlsoSections":[{"generated":true,"anchor":"The-Basics","title":"The Basics","identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/navigationtree"]}],"abstract":[{"type":"text","text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live."}],"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","interfaceLanguage":"swift"},"references":{"doc://NavigatorUI/documentation/NavigatorUI":{"abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/navigatorui","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","title":"NavigatorUI","role":"collection"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/navigatorui\/dismissible","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"title":"Dismissible Views","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"kind":"article","role":"article","url":"\/documentation\/navigatorui\/checkpoints","title":"Checkpoints","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"role":"article","url":"\/documentation\/navigatorui\/destinations","title":"Destinations","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"title":"ManagedNavigationStack","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","type":"topic","navigatorTitle":[{"text":"ManagedNavigationStack","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"abstract":[{"type":"text","text":"Creates a NavigationStack and its associated Navigator that “manages” the stack."}],"role":"symbol","kind":"symbol","url":"\/documentation\/navigatorui\/managednavigationstack"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedPresentationView"}],"kind":"symbol","url":"\/documentation\/navigatorui\/managedpresentationview","navigatorTitle":[{"kind":"identifier","text":"ManagedPresentationView"}],"abstract":[{"type":"text","text":"Allows presented views not in a navigation stack to be dismissed using a Navigator."}],"type":"topic","title":"ManagedPresentationView"},"doc://NavigatorUI/documentation/NavigatorUI/Navigator":{"title":"Navigator","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Navigator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Navigator"}],"url":"\/documentation\/navigatorui\/navigator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Navigator"}],"abstract":[{"type":"text","text":"Every ManagedNavigationStack has a Navigator to manage it."}],"role":"symbol","type":"topic"}}}