{"kind":"article","sections":[],"abstract":[{"type":"text","text":"Understanding dismissible views and their role in application navigation and deep linking."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"How does a presented view dismiss itself? How does a parent view dismiss its children when needed?","type":"text"}]},{"inlineContent":[{"text":"What if we don’t have access to the state that triggered the original presentation?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And what about deep-linking? Linking to a known location an application is easy when an application is launched, but what if the application’s been running for a while? What if the user’s presented a sheet or fullscreen cover view and is in the middle of doing something else?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"How do you return to a known state in the application?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And what if I want to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prevent"}]},{"type":"text","text":" such things from happening if, say, I’m in the middle of a banking transaction?"}],"type":"paragraph"},{"inlineContent":[{"text":"All of these problems are solved in Navigator by using managed ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"dismissible","type":"text"}]},{"type":"text","text":" views."}],"type":"paragraph"},{"level":2,"anchor":"Dismissible-Views","type":"heading","text":"Dismissible Views"},{"inlineContent":[{"type":"text","text":"So what’s a dismissible view?"}],"type":"paragraph"},{"inlineContent":[{"text":"Well, the easy answer would be that a dismissible view is a presented view that can be dismissed… and that’s true. But a better definition for our","type":"text"},{"text":" ","type":"text"},{"text":"purposes is that a dismissible view is a ","type":"text"},{"inlineContent":[{"type":"text","text":"presented"}],"type":"emphasis"},{"type":"text","text":" view that Navigator "},{"type":"emphasis","inlineContent":[{"text":"knows how to dismiss","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"The Navigation Tree","anchor":"The-Navigation-Tree"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","isActive":true,"type":"reference"},{"type":"text","text":", Navigator builds a navigation tree of Navigators within your application, starting from the application root, into each "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true},{"text":", and from there into every presented view wrapped in a ","type":"text"},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Think of a TabView where each tab has it’s own "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","isActive":true},{"type":"text","text":". Each managed stack and associated Navigator is a child of the application root."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And if a tab presents a view via a sheet or cover, that view is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"also"}]},{"type":"text","text":" a node in the navigation tree."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The result is a tree of navigation stacks (and paths), presented views that can have their own stacks and paths and presented views, and so on, and so on, as needed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This tree can be walked by Navigator and the application at will, allowing the dismissal of presented views from child or root, without the need for passed bindings or closures."}],"type":"paragraph"},{"level":3,"text":"Checkpoints","type":"heading","anchor":"Checkpoints"},{"inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and if you’re in a child view a better solution is returning to previously established "},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But that doesn’t help if you’re deep linking of if you’re engaged in cross-module navigation, so let’s be about it."}],"type":"paragraph"},{"level":2,"text":"Operations","type":"heading","anchor":"Operations"},{"inlineContent":[{"type":"text","text":"So here are some of Navigator’s “dismiss” operations, along with examples and use cases."}],"type":"paragraph"},{"level":3,"text":"• Dismiss","type":"heading","anchor":"-Dismiss"},{"inlineContent":[{"type":"text","text":"Dismisses the currently presented ManagedNavigationStack."}],"type":"paragraph"},{"code":["Button(\"Dismiss\") {","    navigator.dismiss()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that unlike Apple’s dismiss environment variable, Navigator’s dismiss function doesn’t “pop” the current view on the navigation path."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It exists "},{"inlineContent":[{"type":"text","text":"solely"}],"type":"emphasis"},{"type":"text","text":" to dismiss the currently presented view from "},{"inlineContent":[{"type":"text","text":"within"}],"type":"emphasis"},{"type":"text","text":" the"},{"type":"text","text":" "},{"type":"text","text":"currently presented view."}],"type":"paragraph"},{"level":3,"text":"• DismissPresentedViews","type":"heading","anchor":"-DismissPresentedViews"},{"inlineContent":[{"type":"text","text":"Dismisses any presented sheet or fullScreenCover views presented by this Navigator using "},{"type":"codeVoice","code":"navigator.navigate(to:)"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["Button(\"Dismiss Presented Views\") {","    navigator.dismissPresentedViews()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This is used in the parent view to dismiss its children, effectively the opposite of "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"• DismissAnyChildren","type":"heading","anchor":"-DismissAnyChildren"},{"inlineContent":[{"type":"text","text":"Dismisses "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" presented by this Navigator or by any child of this Navigator in the current"},{"type":"text","text":" "},{"type":"text","text":"navigation tree."}],"type":"paragraph"},{"code":["Button(\"Dismiss Any Children\") {","    navigator.dismissAnyChildren()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Returns true if a dismissal occurred, false otherwise."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is used in the parent view to dismiss its children, effectively the opposite of "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"• DismissAny","type":"heading","anchor":"-DismissAny"},{"inlineContent":[{"type":"text","text":"Returns to the root Navigator and dismisses "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"ManagedNavigationStack"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedPresentationView"},{"type":"text","text":" presented anywhere in the navigation tree."}],"type":"paragraph"},{"code":["Button(\"Dismiss Any\") {","    try? navigator.dismissAny()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Returns true if a dismissal occurred, false otherwise."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This functionality is used extensively in deep linking and cross-module navigation in order to clear any presented views prior to taking the user"},{"type":"text","text":" "},{"type":"text","text":"elsewhere in the application."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"“I don’t care what the user is doing. Shut it down.”"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It dismisses anything. Anywhere."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that this call can throw and fail if navigation is locked."}],"type":"paragraph"},{"level":2,"text":"Locking Navigation","type":"heading","anchor":"Locking-Navigation"},{"inlineContent":[{"type":"text","text":"As mentioned earlier, what if I want to "},{"inlineContent":[{"type":"text","text":"prevent"}],"type":"emphasis"},{"type":"text","text":" dismissal from happening?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"What if, for example, I presented a sheet to pay bils and I don’t want a deep link to interrupt my flow?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Just add the "},{"type":"codeVoice","code":"navigationLocked"},{"type":"text","text":" modifier to the presented view."}],"type":"paragraph"},{"code":["MyTransactionView()","    .navigationLocked()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can still dismiss your view, and a parent can still dismiss its child, but the global "},{"type":"codeVoice","code":"dismissAny"},{"type":"text","text":" action will fail and throw an error."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When the view containing the navigation lock is dismissed, the global lock is cleared automatically."}],"type":"paragraph"},{"level":2,"text":"Modifiers","type":"heading","anchor":"Modifiers"},{"inlineContent":[{"type":"text","text":"Dismissal can also be purely state driven using the following modifiers."}],"type":"paragraph"},{"code":["\/\/ dismiss",".navigationDismiss(trigger: $dismiss1)","","\/\/ dismiss presented views",".NavigationDismissPresentedViews(trigger: $dismiss2)","","\/\/ dismiss any children",".navigationDismissAnyChildren(trigger: $dismiss3)","","\/\/ dismiss any",".navigationDismissAny(trigger: $dismiss4)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Binding must be a boolean value and toggled to true to trigger the dismissal. Bound value will be reset to false afterwards."}],"type":"paragraph"},{"level":2,"text":"Checkpoints","type":"heading","anchor":"Checkpoints"},{"inlineContent":[{"type":"text","text":"Keep in mind that dismissal is largely imperative and fragile. It depends on knowledge of how the app is constructed and how the views are presented."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So, again, if you’re in a child view a better solution is returning to a previously established checkpoint ("},{"type":"reference","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","isActive":true},{"type":"text","text":")."}],"type":"paragraph"},{"level":3,"text":"Internals","type":"heading","anchor":"Internals"},{"inlineContent":[{"type":"text","text":"That said, you should be aware that checkpoint behavior is based in part on dismissible views!"}],"type":"paragraph"},{"code":["internal func returnToCheckpoint<T>(_ checkpoint: NavigationCheckpoint<T>) {","    guard let (navigator, found) = find(checkpoint) else {","        return","    }","    ...","    _ = navigator.dismissAnyChildren()","    _ = navigator.pop(to: found.index)","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This is just one example of how Navigator’s core functionality is used to enable more complex behaviors."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/navigatorui\/dismissible"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Dismissible Views","modules":[{"name":"NavigatorUI"}],"roleHeading":"Article","role":"article"},"seeAlsoSections":[{"title":"The Basics","anchor":"The-Basics","generated":true,"identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"]}],"references":{"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"kind":"article","abstract":[{"text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live.","type":"text"}],"role":"article","url":"\/documentation\/navigatorui\/navigationtree","title":"Understanding The Navigation Tree","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},"doc://NavigatorUI/documentation/NavigatorUI":{"abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/navigatorui","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","title":"NavigatorUI","role":"collection"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedNavigationStack":{"title":"ManagedNavigationStack","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedNavigationStack","type":"topic","navigatorTitle":[{"text":"ManagedNavigationStack","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedNavigationStack","kind":"identifier"}],"abstract":[{"type":"text","text":"Creates a NavigationStack and its associated Navigator that “manages” the stack."}],"role":"symbol","kind":"symbol","url":"\/documentation\/navigatorui\/managednavigationstack"},"doc://NavigatorUI/documentation/NavigatorUI/Checkpoints":{"abstract":[{"type":"text","text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree."}],"kind":"article","role":"article","url":"\/documentation\/navigatorui\/checkpoints","title":"Checkpoints","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints"},"doc://NavigatorUI/documentation/NavigatorUI/ManagedPresentationView":{"identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/ManagedPresentationView","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedPresentationView"}],"kind":"symbol","url":"\/documentation\/navigatorui\/managedpresentationview","navigatorTitle":[{"kind":"identifier","text":"ManagedPresentationView"}],"abstract":[{"type":"text","text":"Allows presented views not in a navigation stack to be dismissed using a Navigator."}],"type":"topic","title":"ManagedPresentationView"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"role":"article","url":"\/documentation\/navigatorui\/destinations","title":"Destinations","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"}}}