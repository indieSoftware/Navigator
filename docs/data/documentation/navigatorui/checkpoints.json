{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Like most systems based on NavigationStack, Navigator supports operations like popping back to a previous view, dismissing a presented view, and so on."}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Pop To Previous Screen\") {","    navigator.pop()","}","Button(\"Dismiss Presented View\") {","    navigator.dismiss()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"But those are all imperative operations. While one can programmatically pop and dismiss their way out of a screen, that approach is problematic and tends to be fragile. It also assumes that the code has explicit knowledge of the application structure and navigation tree."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One could pass bindings down the tree, but that can also be cumbersome and difficult to maintain."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Fortunately, Navigator supports checkpoints; named points in the navigation stack to which one can easily return."}],"type":"paragraph"},{"level":2,"text":"Examples","type":"heading","anchor":"Examples"},{"level":3,"text":"Defining a Checkpoint","type":"heading","anchor":"Defining-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Checkpoints are easy to define and use. Let’s create one called “home”."}],"type":"paragraph"},{"syntax":"swift","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var home: NavigationCheckpoint<Void> { checkpoint() }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Just conform your definitions to "},{"code":"NavigationCheckpoints","type":"codeVoice"},{"type":"text","text":" and specify the return type of the checkpoint (or void if none)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Using "},{"code":"{ checkpoint() }","type":"codeVoice"},{"type":"text","text":" ensures a checkpoint definition and name that’s unique. Here, that’s "},{"code":"KnownCheckpoints.home.()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"Establishing a Checkpoint","type":"heading","anchor":"Establishing-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Now lets attach that checkpoint to our home view."}],"type":"paragraph"},{"syntax":"swift","code":["struct RootHomeView: View {","    var body: some View {","        ManagedNavigationStack(scene: \"home\") {","            HomeContentView(title: \"Home Navigation\")","                .navigationCheckpoint(KnownCheckpoints.home)","                .navigationDestination(HomeDestinations.self)","        }","    }","}"],"type":"codeListing"},{"level":3,"text":"Returning to a Checkpoint","type":"heading","anchor":"Returning-to-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Once defined, they’re easy to use."}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Return To Checkpoint Home\") {","    navigator.returnToCheckpoint(KnownCheckpoints.home)","}",".disabled(!navigator.canReturnToCheckpoint(KnownCheckpoints.home))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When fired, checkpoints will dismiss any presented screens and pop any pushed views to return exactly where desired."}],"type":"paragraph"},{"level":2,"text":"Advanced Checkpoints","type":"heading","anchor":"Advanced-Checkpoints"},{"level":3,"text":"Returning values to a Checkpoint","type":"heading","anchor":"Returning-values-to-a-Checkpoint"},{"inlineContent":[{"type":"text","text":"Checkpoints can also be used to return values to a caller."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As before we define our checkpoint, specifying the return value type."}],"type":"paragraph"},{"syntax":"swift","code":["struct KnownCheckpoints: NavigationCheckpoint {","    public static var settings: NavigationCheckpoint<Int> { checkpoint() }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We then establish our checkpoint, but this time we add a handler that receives our value type."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Define a checkpoint with a value handler.",".navigationCheckpoint(KnownCheckpoints.settings) { result in","    returnValue = result","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then later on when we’re ready to return we call "},{"code":"returnToCheckpoint","type":"codeVoice"},{"type":"text","text":" as usual, but in this case passing our return value as well."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Return, passing a value.","Button(\"Return to Settings Checkpoint Passing Value 5\") {","    navigator.returnToCheckpoint(KnownCheckpoints.settings, value: 5)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The value type returned must match the checkpoint definition, otherwise you’ll get a compiler error."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Checkpoint return values come in handy when enabling state restoration in our navigation system, especially since view bindings and callback closures can’t be persisted to external storage."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The value types specified in the handler and sent by the return function must match. If they don’t then the handler will not be called."}],"type":"paragraph"}],"name":"Important","style":"important","type":"aside"},{"inlineContent":[{"type":"text","text":"Checkpoints are a powerful tool. Use them."}],"type":"paragraph"}]}],"metadata":{"title":"Checkpoints","roleHeading":"Article","modules":[{"name":"NavigatorUI"}],"role":"article"},"kind":"article","hierarchy":{"paths":[["doc:\/\/NavigatorUI\/documentation\/NavigatorUI"]]},"seeAlsoSections":[{"title":"The Basics","generated":true,"anchor":"The-Basics","identifiers":["doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations","doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/navigatorui\/checkpoints"]}],"abstract":[{"text":"Navigation Checkpoints allow one to return to a specific waypoint in the navigation tree.","type":"text"}],"identifier":{"url":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Checkpoints","interfaceLanguage":"swift"},"references":{"doc://NavigatorUI/documentation/NavigatorUI/NavigationTree":{"kind":"article","abstract":[{"text":"To get the most out of Navigator you need to understand the navigation tree where its Navigators live.","type":"text"}],"role":"article","url":"\/documentation\/navigatorui\/navigationtree","title":"Understanding The Navigation Tree","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/NavigationTree"},"doc://NavigatorUI/documentation/NavigatorUI/Dismissible":{"type":"topic","role":"article","kind":"article","url":"\/documentation\/navigatorui\/dismissible","abstract":[{"text":"Understanding dismissible views and their role in application navigation and deep linking.","type":"text"}],"title":"Dismissible Views","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Dismissible"},"doc://NavigatorUI/documentation/NavigatorUI/Destinations":{"kind":"article","abstract":[{"text":"All navigation in Navigator is accomplished using enumerated values that conform to the NavigationDestination protocol.","type":"text"}],"role":"article","url":"\/documentation\/navigatorui\/destinations","title":"Destinations","type":"topic","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI\/Destinations"},"doc://NavigatorUI/documentation/NavigatorUI":{"abstract":[{"text":"Managed NavigationStacks for SwiftUI.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/navigatorui","identifier":"doc:\/\/NavigatorUI\/documentation\/NavigatorUI","title":"NavigatorUI","role":"collection"}}}